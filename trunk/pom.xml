<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <name>JNDI View</name>

  <groupId>jndi-view</groupId>
  <artifactId>jndi-view</artifactId>
  <packaging>war</packaging>
  <version>0.2-SNAPSHOT</version>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>LICENSE.txt</url>
    </license>
  </licenses>

  <!-- SVN Configuration -->
  <scm>
    <connection>scm:svn:http://jndi-view.googlecode.com/svn/trunk</connection>
    <developerConnection>scm:svn:https://jndi-view.googlecode.com/svn/trunk</developerConnection>
    <url>http://code.google.com/p/jndi-view/source/browse/#svn/trunk</url>
  </scm>

  <properties>
    <!-- The Spring framework version to use -->
    <spring.version>3.1.1.RELEASE</spring.version>
    <!-- Use UTF-8 as the default source encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>

    <!-- Freemarker (for MVC view) -->
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <version>2.3.16</version>
    </dependency>

    <!-- Core utilities used by other modules. Define this if you use Spring
      Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Expression Language (depends on spring-core) Define this if you
      use Spring Expression APIs (org.springframework.expression.*) -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-expression</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define
      this if you use Spring Bean APIs (org.springframework.beans.*) -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Application Context (depends on spring-core, spring-expression,
      spring-aop, spring-beans) This is the central artifact for Spring's Dependency
      Injection Container and is generally always defined -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Various Application Context utilities, including EhCache, JavaMail,
      Quartz, and Freemarker integration Define this if you need any of these integrations -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Web application development utilities applicable to both Servlet
      and Portlet Environments (depends on spring-core, spring-beans, spring-context)
      Define this if you use Spring MVC, or wish to use Struts, JSF, or another
      web framework with Spring (org.springframework.web.*) -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans,
      spring-context, spring-web) Define this if you use Spring MVC with a Servlet
      Container such as Apache Tomcat (org.springframework.web.servlet.*) -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!-- Support for testing Spring applications with tools such as JUnit
      and TestNG This artifact is generally always defined with a 'test' scope
      for the integration testing framework and unit testing stubs -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${spring.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Commons logging -->
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>

    <!-- Foundations -->
    <!-- Servlet API -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>
    <!-- JavaEE 6.0 -->
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <version>6.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Set Maven to compile for Java 5 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <!-- Configure the Maven Checkstyle plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <configLocation>${basedir}/etc/checkstyle.xml</configLocation>
          <consoleOutput>true</consoleOutput>
          <propertyExpansion>config_loc=${project.basedir}/etc</propertyExpansion>
          <failsOnError>true</failsOnError>
        </configuration>
        <executions>
          <execution>
            <phase>test</phase>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <failOnViolation>true</failOnViolation>
              <violationSeverity>warning</violationSeverity>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Configure the Maven license plugin -->
      <plugin>
        <groupId>com.google.code.maven-license-plugin</groupId>
        <artifactId>maven-license-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <header>etc/license-header.txt</header>
          <includes>
            <include>src/**</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>

    <extensions>
      <!-- Google SVN Wagon -->
      <extension>
        <groupId>com.google.code.maven-svn-wagon</groupId>
        <artifactId>maven-svn-wagon</artifactId>
        <version>1.3</version>
      </extension>
    </extensions>
  </build>

  <developers>
    <developer>
      <id>aisrael</id>
      <name>Alistair A. Israel</name>
      <roles>
        <role>developer</role>
      </roles>
      <email>aisrael@gmail.com</email>
    </developer>
  </developers>

  <!-- Use the Google Code public SVN as our Maven 2 distribution repository -->
  <distributionManagement>
    <repository>
      <uniqueVersion>false</uniqueVersion>
      <id>jndi-view-releases</id>
      <url>svn:https://jndi-view.googlecode.com/svn/maven2/releases/</url>
    </repository>
  </distributionManagement>

  <profiles>
    <!-- Allow mvn glassfish:deploy by simply setting GLASSFISH_HOME environment
      variable -->
    <profile>
      <id>glassfish</id>
      <activation>
        <property>
          <name>env.GLASSFISH_HOME</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.glassfish.maven.plugin</groupId>
            <artifactId>maven-glassfish-plugin</artifactId>
            <version>2.1</version>
            <configuration>
              <user>admin</user>
              <passwordFile>${user.home}/.asadminpass</passwordFile>
              <glassfishDirectory>${env.GLASSFISH_HOME}</glassfishDirectory>
              <domain>
                <name>domain1</name>
                <httpPort>8080</httpPort>
                <adminPort>4848</adminPort>
              </domain>
              <components>
                <component>
                  <name>${project.artifactId}</name>
                  <artifact>${project.build.directory}/${project.build.finalName}.war</artifact>
                </component>
              </components>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
